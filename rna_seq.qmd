---
title: "Bulk Gene Expression Analysis"
format: html
editor: visual
author: Zifo RnD Solutions
date: "`r Sys.Date()`"
toc : true
toc-title : Contents
toc-location : left
number-sections: true
fig-cap-location: bottom
execute:
  echo: false
params:
  sample_data:
    - "./data/samples.tsv"
  counts_data:
    - "./data/counts.tsv"
  genes_data:
    - "./data/genes.tsv"
  design:
    - "~type + condition"
  design_2:
    - "~group"
  organism: 
    - org.Dm.eg.db
  colname:
    - "condition"
  colname_2:
    - "group"
  contrasts:
    value:
      Treated_vs_Untreated: ["treated", "untreated"]
    
  contrasts_2:
    value:
      treated_single_vs_treated_paired: ["treated.single-read", "untreated.single-read"]
      untreated_paired_vs_treated_paired: ["treated.paired-end", "untreated.paired-end"]
---

```{r}
#| warning: false
#| include: false
# Installing the required packages and loading them  for Bulk RNA Seq Analysis.
library(dplyr)
library(textshape)
library(ggplot2)
library(viridis)
library(Rsubread)
library(DESeq2)
library(pheatmap)
library(AnnotationDbi)
library(org.Dm.eg.db)
library(EnhancedVolcano)
library(clusterProfiler)
library(enrichplot)
library(ggplot2)
library(ggridges)
library(europepmc)
library(pathview)
library(biomaRt)
library(dplyr)
library(tidyverse)
library(fgsea)
library(ggnewscale)
library(htmlwidgets)
library(DT)
library(SummarizedExperiment)
library(workflowr)
library(knitr)
DT::datatable(matrix())
options(DT.warn.size=FALSE)

```

## Metadata of samples

```{r}
#| warning:  false
samples <- read.delim(params$sample_data)
#sample table edits to get the required format
samples$group <- paste(samples$condition ,samples$type, sep = ".")
```

This section contains the sample metadata. Sample name , condition and type or batch effect if present should be  present in the table.

```{r}
#| warning:  false
DT::datatable(samples)
```

::: callout-note
## The fileds of the metadata has been edited in the way required for analysis
:::

## Starting from Count matrix and Constructing the DESeqDataSet object

*DESeqDataSet* is made using countdata and coldata.

    -   countdata: a table with the fragment counts

    -   coldata: a table with information about the samples

```{r}
#| warning: false

#reading the gene annotation file
genes <- read.delim(params$genes_data)

#reading the counts matrix
Counts<- read.delim(params$counts_data)

#data integration test for counts table to check whether no.of rows in counts is equal to gene annotation file
stopifnot("number of rows in the gene annotation table is not the same in the counts,kindly check the data files! " = nrow(genes) == nrow(Counts))

countDataMatrix <- as.matrix(Counts[ , -1])
rownames(countDataMatrix) <- Counts[ , 1]
#data integrity tests for counts table to check the sample order in sample metadata and counts table is same 
stopifnot("Sample order is not the same in the sample table and the counts matrix,Kindly check the data files!" = all(samples$sample == colnames(countDataMatrix)))



#making a dds object using counts matrix and samples metadata
dds <- DESeqDataSetFromMatrix(countData = countDataMatrix, colData = samples, 
                              design = as.formula(params$design) )

dds_2 <- DESeqDataSetFromMatrix(countData = countDataMatrix, colData = samples, 
                              design = as.formula(params$design_2) )


```

## Exploratory Analysis and Visualization

It is important to normalize the data before visualizing it and DESeq2 offers transformations for count data that stabilize the variance across the mean. It minimizes differences between samples for rows with small counts, and normalizes with respect to library size.In this case , regularized-logarithm transformation or rlog2 was done for the data.

```{r}
#| warning: false
#rlog transformation for data visualization
rld <- rlog(dds, blind=TRUE)
```

### PCA Plot

Principal Components Analysis (PCA) visualizes sample-to-sample distances . In this ordination method, the data points (here, the samples) are projected onto the 2D plane such that they spread out in the two directions that capture the most of the variance across samples. The x-axis is the direction that separates the data points the most. The coordinates of the samples in this direction are called PC1.

```{r}
#| warning: false
#| label: fig-pcaplot
#| fig-cap: PCA Plot of Sample Distances

pca <-plotPCA(rld, intgroup="group")
pca

```

@fig-pcaplot shows the distance between the gene expression of samples which can be useful to investigate the reasons for clustering of samples,find out if there are any batch effects and add them in deseq2 while modelling. It can also help to remove the outlier samples if any for the downstream analysis .

### 2.Heatmap

Sample - sample distances can be viewed in Heatmap also. A heatmap of this distance matrix gives us an overview over similarities and dissimilarities between samples.

```{r}
#| warning: false
#| label: fig-heatmap_distance
#| fig-cap: Heatmap Plot of Sample Distances

rld_mat <- assay(rld) 
rld_cor <- cor(rld_mat) 
samples_initial<- read.delim(params$sample_data)
annot_col <- samples_initial%>%
  column_to_rownames('sample') %>%
  dplyr::select(type) %>%
  as.data.frame()

heatmap<-pheatmap(mat=rld_cor,main = "Heatmap - Sample Distances",color = viridis(n=256),
annotation_col = annot_col)
heatmap

```

@fig-heatmap_distance shows the relation between the samples,clustering of samples and reasons behind it. PCA plots can be verified based on the results from the heatmap. Use the annotations on top for better interpretation of the data.

## Differential Expression Analysis

The differential expression analysis using DESeq on DESeqDataSet object for Treated Vs Untreated condition. The brief steps of DESeq includes:

1.  The estimation of size factors

2.  The estimation of dispersion values

3.  Fitting a final generalized linear model estimated above, which gives estimates of the log fold changes.

```{r}
#| warning: false

dir.create("./results")
dir.create("./results/deseq2")
#Saving the dds object as rds in results directory
saveRDS(dds,"./results/deseq2/dds.rds")

#filtering the records by condition
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]

keep_2 <- rowSums(counts(dds_2)) >= 10
dds_2 <- dds_2[keep_2, ]


#deseq2 analysis using DESeq function
dds <- DESeq(dds)
dds_2<-DESeq(dds_2)

```

### Results table

This section contains the results table which has the differentially expressed genes over the particular contrast after Differential Expression Analysis.

#### Contrast factor - Condition

:::{.panel-tabset}
```{r}
#| results: "asis"
#| warning:  false

contrasts_1 <- names(params$contrasts)

for (contrast in contrasts_1){

  groups <- params$contrasts[[contrast]]

  res <- results(dds, contrast = c(params$colname, groups[1], groups[2]))
  res_table<-as.data.frame(res)
  cat("###",contrast,"\n")
  cat(knitr::knit_print(DT::datatable(res_table, height = "20%", width = "100%", options = list(scrollX = TRUE))))
  cat("\n\n")
}

```
:::


#### Contrast factor - Group 

:::{.panel-tabset}
```{r}
#| results: "asis"
#| warning:  false

contrasts_2 <- names(params$contrasts_2)


for (contrast in contrasts_2){

  groups_2 <- params$contrasts_2[[contrast]]

  res_2 <- results(dds_2, contrast = c(params$colname_2, groups_2[1], groups_2[2]))
  res_table_2<-as.data.frame(res_2)
  cat("###",contrast,"\n")
  cat(knitr::knit_print(DT::datatable(res_table_2, height = "20%", width = "100%", options = list(scrollX = TRUE))))
  cat("\n\n")

}

```
:::




Metadata with information on the meaning of the columns is given below:

```{r}
#| warning:  false
res_metadata<-mcols(res, use.names = TRUE)
res_metadata<-as.data.frame(res_metadata)
DT::datatable(res_metadata)
```

Lets have a look at what each column means :

1.  Base Mean : average of the normalized count values, dividing by size factors, taken over all samples in the DESeqDataSet

2.  log2FoldChange : It is the effect size estimate. It tells us how much the gene's expression seems to have changed due to the factor. This value is reported on a logarithmic scale to base 2.

3.  lfcSE : the standard error estimate for the log2 fold change estimate.

4.  stat : For the Wald test, stat is the Wald statistic

5.  pvalue : result of hypothesis test for each gene is reported as a p value.For example, the set of genes with adjusted p value less than 0.1 should contain no more than 10% false positives.

6.  adjusted p value : satisfy the property that thresholding at a specific value defines a set of tests (one for each gene) with a bounded false discovery rate (FDR), typically a useful metric for assessing which genes to target for further analysis

### Summarizing the results

This section contains summary of the results which will give an idea about the up regulated and down regulated number of genes for the particular contrast - Treated_vs_Untreated.

```{r}
#| warning:  false
summary(res)
```

### Annotating to other names-entrez/gene symbol

Our result table so far only contains information about Ensembl gene IDs, but alternative gene names may be more informative for analysis. Bioconductor's annotation packages help with mapping various ID schemes to each other.

Using the mapIds function to add individual columns to our results table. Providing the row names of our results table as a key, and specify that keytype=ENSEMBL. The column argument tells the mapIds function which information we want, and the multiVals argument tells the function what to do if there are multiple possible values for a single input value. Here just giving us back the first one that occurs in the database.To add the gene symbol and Entrez ID, we called mapIds twice.

```{r}
#| warning: false
#To get a list of all available key types
#columns(org.Dm.eg.db)
 
#mapping ensembl id to enrez id and gene symbol using mapIds
ids <- strsplit(rownames(res), ".", fixed = TRUE)
ids <- sapply(ids, head, n = 1)
#org<-noquote(params$organism)
#org<-print(params$organism, quote=FALSE)

org<-eval(parse(text=params$organism))
#for symbol
res$symbol <- mapIds(
  x = org,
  keys = ids,
  column = "SYMBOL",
  keytype = "ENSEMBL",
  multiVals = "first"
)
#for entrez id
res$entrez <- mapIds(
  x = org,
  keys = ids,
  column = "ENTREZID",
  keytype = "ENSEMBL",
  multiVals = "first"
)
# Output the first few lines of the results table

```

Lets have a look at the new results table with additional columns we would love to see:

```{r}
#| warning:  false
res_annotated<-as.data.frame(res)
DT::datatable(head(res_annotated))

```

The results table can be further reduced to a much better version by giving strict padj and log2FoldChange thresholds

```{r}
#| warning:  false

#Exporting  results 
write.csv(as.data.frame(res), file = "./results/deseq2/Treated-Untreated.results.csv")

#filtering the significant genes with padj < 0.05
res_sig <- subset(res, padj < 0.05)

#filtering again the significant genes with l2fc>1 from res_sig
res_lfc<- subset(res_sig, abs(log2FoldChange) > 1)
res_lfc_new<-as.data.frame(res_lfc) 

write.csv(as.data.frame(res_sig), file = "./results/deseq2/Treated-Untreated.signif.csv")
write.csv(as.data.frame(res_lfc), file = "./results/deseq2/Treated-Untreated.signif-lfc.csv")

#saving the final results to rds object
saveRDS(res_lfc,"./results/deseq2/sign_results.rds")
```

Here is the shortlisted differentially expressed significant genes for Treated_vs_Untreated with padj < 0.05 and abs(log2FoldChange) > 1) :

```{r}
#| warning:  false
DT::datatable(res_lfc_new)
```

### Plotting of DESEQ2 results

#### plotCounts

Visualizing the counts for a particular gene

```{r}
#| warning: false
#| label: fig-plotCounts
#| fig-cap: plotCounts of top gene
#getting the top gene
top <- rownames(res)[which.min(res$padj)]
top_gene<-res$symbol[[top]] 
#plotCounts for the data object 
plotCounts(dds, gene = top, intgroup = "condition", main = top_gene) 
```

@fig-plotCounts, visualizing the normalized counts over both conditions. It helps us to infer the level of difference in gene expression in different conditions. Hence , we can say if there is no or up or down regulation of a gene in a particular condition.

#### plotMA

An MA-plot provides a useful overview for an experiment with a two-group comparison.

```{r}
#| warning: false
#| label: fig-plotMA
#| fig-cap: An MA-plot of changes induced by treatment.


plotMA(res)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
legend(1e+04, 3, legend=c("Non Sign", "Sign"), 
       fill = c("grey","blue")) 
```

In @fig-plotMA ,The log2 fold change for a particular comparison is plotted on the y-axis and the average of the counts normalized by size factor is shown on the x-axis Each gene is represented with a dot. Genes with an adjusted p value below a threshold (here 0.1, the default) are shown in blue.

#### Volcanoplot

A volcano plot is a type of scatterplot that shows statistical significance (P value) versus magnitude of change (fold change). It enables quick visual identification of genes with large fold changes that are also statistically significant. In a volcano plot, the most up-regulated genes are towards the right, the most down-regulated genes are towards the left, and the most statistically significant genes are towards the top.

```{r}
#| warning: false
#| label: fig-volcano
#| fig-cap: Volcano Plot of Differentially Expressed genes


EnhancedVolcano(res,
                lab = res$symbol,
                x = 'log2FoldChange',
                y = 'pvalue',
                pCutoff = 10e-32,
                FCcutoff = 2,
                pointSize = 3.0,
                labSize = 6.0 ,
                )
```

In @fig-volcano, differentially expressed genes which are statistically significant are labelled in red color. The pCutoff and FCcutoff can also be updated based on needs.

#### Heatmap

Since the clustering is only relevant for genes that actually carry a signal, one usually would only cluster a subset of the most highly variable genes. This section shows the heatmap of gene expression of 20 top genes across all samples .

```{r}
#| warning: false
#| label: fig-heatmap
#| fig-cap: Heatmap of relative rlog-transformed values across samples


#ordering the genes based on l2fc,retrieving the first 20 gene rownames
genes <- order(res_lfc$log2FoldChange, decreasing=TRUE)[1:20]
gene_names<-rownames(res_lfc)[genes]

#getting the gene symbols of those 20 rownames
names<-res_lfc$symbol[gene_names]
#making it into a dataframe
names<-data.frame(names)

# to see the actual data,the fragment counts,using the assay function.
data<-colnames(assay(rld)[gene_names,])
#cbinding the gene symbols along with assay(rld)
new<-cbind(names,assay(rld)[gene_names,])
df <- subset (new, select = -names)

#for annotations on condition and sequencing type
annot_col <- samples_initial%>%
  column_to_rownames('sample') %>%
  dplyr::select(condition,type) %>%
  as.data.frame()

#using pheatmap for heatmap
pheatmap(df, cluster_rows=TRUE, labels_row = names$names,legend_breaks = -2:2,
         cluster_cols=FALSE, annotation_col=annot_col, main= "Heatmap of expression of genes",scale = "row")
         

```

In @fig-heatmap, annotation information are shown with colored bars at the top. It helps us to find out the over expression or under expression of top selected genes in specific samples. The clustering of gene expression can be studied using the annotations provided.

## Summary

### Parameters

```{r}
#| warning:  false

parameters <- list(
    list(
        Parameter = names(params[1]),
        Value = params[[1]],
        Description = "Sample metadata"
    ),
    list(
        Parameter = names(params[2]),
        Value = params[[2]],
        Description = "Counts data for Differential Expression Analysis"
    ),
    list(
        Parameter = names(params[3]),
        Value = params[[3]],
        Description = "Gene Annotation file "
    ),
    list(
        Parameter = names(params[4]),
        Value = params[[4]],
        Description = "The design for the Differential Expression Analysis_1"
    ),
    list(
        Parameter = names(params[5]),
        Value = params[[5]],
        Description = "The design for the Differential Expression Analysis_2"
    ),
    list(
        Parameter = names(params[6]),
        Value = params[[6]],
        Description = "Organism in the study"
    ),
    
    list(
        Parameter = names(params[7]),
        Value = params[[7]],
        Description = "Colname in the metadata used as factor for Differential Expression_1"
    ),
    list(
        Parameter = names(params[8]),
        Value = params[[8]],
        Description = "Colname in the metadata used as factor for Differential Expression_2"
    ),
    list(
        Parameter = names(params[9]),
        Value = names(params$contrasts),
        Description = "Contrasts for DESeq2 analysis_1"
    ),
    list(
        Parameter = names(params[10]),
        Value = names(params$contrasts_2),
        Description = "Contrasts for DESeq2 analysis_2"
    )
   
   
)

parameters <- jsonlite::toJSON(parameters, pretty = TRUE)
DT::datatable(jsonlite::fromJSON(parameters))

```

### Output Files

| Output File                 | Link                                                                   |
|----------------------------------------------|--------------------------|
| dds rds                     | [dds](./results/deseq2/dds.rds)                                        |
| DESeq2 results              | [Results](./results/deseq2/Treated-Untreated.results.csv)              |
| DESEQ2 results filtered     | [Final Results](./results/deseq2/Treated-Untreated.signif-lfc.csv)     |
| DESEQ2 results filtered rds | [Final_rds](./results/deseq2/sign_results.rds)                         |
| PCA Plot                    | [PCA](./rna_seq_files/figure-html/fig-pcaplot-1.png)                   |
| Heatmap_distance            | [Heatmap_dist](./rna_seq_files/figure-html/fig-heatmap_distance-1.png) |
| plotCounts                  | [plotCounts](./rna_seq_files/figure-html/fig-plotCounts-1.png)         |
| MA plot                     | [MA](./rna_seq_files/figure-html/fig-plotMA-1.png)                     |
| Volcano Plot                | [Volcano](./rna_seq_files/figure-html/fig-volcano-1.png)               |
| Heatmap_geneexpression      | [Heatmap_geneexp](./rna_seq_files/figure-html/fig-heatmap-1.png)       |

### Session info
<input type=button class=hideshow></input>
```{r}
#| warning:  false


sessionInfo()
```
<script>
$( "input.hideshow" ).each( function ( index, button ) {
  button.value = 'Hide Output';
  $( button ).click( function () {
    var target = this.nextSibling ? this : this.parentNode;
    target = target.nextSibling.nextSibling;
    if ( target.style.display == 'block' || target.style.display == '' ) {
      target.style.display = 'none';
      this.value = 'Show Output';
    } else {
      target.style.display = 'block';
      this.value = 'Hide Output';
    }
  } );
} );
</script>
